// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  PREMIUM_USER
  SUPER_ADMIN
  FAQ_MANAGER
  REPORT_MANAGER
  CONSULTANT_MANAGER
  CONSULTANT
  GENERAL_MANAGER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  avatar        String?
  password      String?
  role          UserRole  @default(USER)
  division               String?                 
  district               String?                 
  upzilla                String?  
  mobile       String?  @unique              
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  // Community feature relations
  posts                 Post[]
  comments              Comment[]
  reactions             Reaction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Community feature models
model Post {
  id                 String      @id @default(cuid())
  title              String
  content            String      @db.Text
  isAnonymous        Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments           Comment[]
  reactions          Reaction[]
  tags               String[]
  
  @@index([userId])
}

enum ReactionType {
  LIKE
  HEART
  SUPPORT
  HUG
  THANKS
}

model Reaction {
  id          String       @id @default(cuid())
  type        ReactionType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId, type])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  isAnonymous Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([postId])
  @@index([userId])
}

